##################################################
# Constants
##################################################
ISE_VER = $(shell xtclsh -h | head -n1 | cut -f2 -d" " | cut -f1 -d.)
ifeq ($(ISE_VER),10)
	ISE_EXT = ise
else
	ISE_EXT = xise
endif
BASE_DIR = $(abspath ../../../..)
BUILD_DIR = build
ISE_HELPER = xtclsh $(BASE_DIR)/hw/tools/xilinx/ise_helper.tcl
ISE_FILE = $(BUILD_DIR)/$(TOP_MODULE).$(ISE_EXT)
BIT_FILE = $(BUILD_DIR)/$(TOP_MODULE).bit
MCS_FILE = $(BUILD_DIR)/$(TOP_MODULE).mcs
IMPACT_CDF = $(TOP_MODULE).cdf
IMPACT_LBIT = $(TOP_MODULE).loadbit
IMPACT_LFLASH = $(TOP_MODULE).loadflash

COREGEN_DIR = $(abspath $(BASE_DIR)/hw/mach/common/coregen/)

##################################################
# Global Targets
##################################################

COREGEN_OBJ_AUX = $(MACH_COMMON_COREGEN_SRCS:.xco=.gise)
COREGEN_OBJ = $(abspath $(addprefix $(COREGEN_DIR)/, $(COREGEN_OBJ_AUX)))

%.gise: %.xco
	@echo "Generating core $<"
	cd $(COREGEN_DIR); coregen -b $(notdir $<) -p coregen.cgp
	@echo ' '

all: hls bit

proj: $(ISE_FILE)
	
check: $(ISE_FILE)
	$(ISE_HELPER) "Check Syntax"

synth: $(ISE_FILE)
	$(ISE_HELPER) "Synthesize - XST"

bit: $(BIT_FILE)

mcs: $(MCS_FILE)

clean:
	$(RM) -r $(BUILD_DIR)
	
hls:
	make all --directory=$(BASE_DIR)/hw/framework/catapult/top_level
	
hls_clean:
	make clean --directory=$(BASE_DIR)/hw/framework/catapult/top_level

veryclean: clean hls_clean

coregen_clean:
	cd $(COREGEN_DIR); \
	rm -rf \
	clk_xlnx_100M_diff \
	ram_amba_128k \
	ram_amba_1024k \
	chipscope_icon ; \
	rm -f coregen.cgc; \
	rm -rf tmp _xmsgs; \
	rm -f *.xise *.gise *.ncf *.tcl *.ejp *.log *.ngc *~ *.v *.veo *.vhd *.vho *.mif *.txt *.asy *.cdc *.pdf

program: bit
	impact -batch $(IMPACT_LBIT)
	
program_flash: mcs
	impact -batch $(IMPACT_LFLASH)	

.PHONY: all proj check synth bin mcs clean hls hls_clean veryclean coregen_clean program program_flash

##################################################
# Dependency Targets
##################################################
$(ISE_FILE): $(COREGEN_OBJ) $(SOURCES)
	@echo $@
	$(ISE_HELPER) ""

$(BIT_FILE): $(ISE_FILE)
	@echo $@
	$(ISE_HELPER) "Generate Programming File"
	touch $@

$(MCS_FILE): $(BIT_FILE)
	promgen -w -p mcs -x $(PROM_DEVICE) $(PROM_DEVICE_FLAGS) -o $(MCS_FILE) -u 0 $(BIT_FILE)

.EXPORT_ALL_VARIABLES:
