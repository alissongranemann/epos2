#include "aes.h"

namespace Implementation {

// Byte substitution box pre calculated
const unsigned char AES_Common::_sBox[256] = {0x63, 0x7C, 0x77, 0x7B, 0xF2,
    0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA,
    0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C,
    0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34,
    0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18,
    0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09,
    0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29,
    0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A,
    0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43,
    0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51,
    0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10,
    0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4,
    0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22,
    0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0,
    0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91,
    0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C,
    0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C,
    0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70,
    0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86,
    0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B,
    0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF,
    0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

const unsigned char AES_Common::_inv_sBox[256] = {0x52, 0x09, 0x6A, 0xD5, 0x30,
    0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C,
    0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4,
    0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE,
    0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28,
    0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72,
    0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D,
    0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E,
    0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C,
    0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0,
    0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01,
    0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97,
    0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7,
    0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47,
    0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA,
    0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A,
    0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88,
    0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60,
    0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93,
    0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8,
    0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x04, 0x7E, 0xBA,
    0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

// Round constant array pre calculated
const unsigned char AES_Common::_Rcon[256] = {0x8d, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
    0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
    0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab,
    0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
    0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
    0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
    0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3,
    0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d,
    0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
    0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
    0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
    0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d};

// The variable in is the "t" variable from key_expansion funciton (array of 4 char)
void AES_Common::_rotate(unsigned char * in) {
    unsigned char tmp;

    tmp = in[0];

    for(unsigned int i = 0; i < 3; i++)
        in[i] = in[i + 1];

    in[3] = tmp;
}

void AES_Common::_scheduleCore(unsigned char * in, unsigned char i) {
    _rotate(in);

    // Substitute the byte for one its correspondent in sbox
    for(unsigned int j = 0; j < 4; j++)
        in[j] = _sBox[in[j]];

    in[0] ^= _Rcon[i];
}

// The variable "in" is an array (unsigned char in[EXPANDED_SIZE]). this array
// is composed by 11 16-byte words(keys), where the first is the original Cipher
// Key
unsigned char AES_Common::_expandKey(unsigned char * in) {
    unsigned char t[NB];
    unsigned char c = CIPHER_SIZE; // inicial filling of the array
    unsigned char i = 1; // set to 1 because the original key is already in the array
    unsigned char a; // counter of rcon iteration value

    while(c < EXPANDED_SIZE) {
        for(a = 0; a < NB; a++)
            t[a] = in[a + c - 4]; // asign the last 4 values to t

        // New round_key obtained **
        if(c % CIPHER_SIZE == 0) {
            // Call schedule core to complete a new round key
            _scheduleCore(t, i);
            i++;
        }

        for(a = 0; a < NB; a++) {
            // XOR with 4-byte array
            in[c] = in[c - CIPHER_SIZE] ^ t[a];
            c++;
        }
    }

    return 0;
}

// Mix collumn operation in = state
void AES_Common::_mixColumns(unsigned char * in) {
    unsigned char a[CIPHER_SIZE];
    unsigned char b[CIPHER_SIZE];
    unsigned char c, k;
    unsigned char h;

    for(k = 0; k < NB; k++) {
        for(c = 0; c < NB; c++) {
            a[(4*k) + c] = in[(4*k) + c];
            h = in[(4*k) + c] & 0x80;
            b[(4*k) + c] = in[(4*k) + c] << 1;

            if(h == 0x80)
                b[(4*k) + c] ^= 0x1b; // calculates the constants used for the mix columns operation
        }

        // Series of XORs to apply the diffusion step
        in[(4*k) + 0] = b[(4*k) + 0]^a[(4*k) + 3]^a[(4*k) + 2]^b[(4*k)+1]^a[(4*k) + 1];
        in[(4*k) + 1] = b[(4*k) + 1]^a[(4*k) + 0]^a[(4*k) + 3]^b[(4*k)+2]^a[(4*k) + 2];
        in[(4*k) + 2] = b[(4*k) + 2]^a[(4*k) + 1]^a[(4*k) + 0]^b[(4*k)+3]^a[(4*k) + 3];
        in[(4*k) + 3] = b[(4*k) + 3]^a[(4*k) + 2]^a[(4*k) + 1]^b[(4*k)+0]^a[(4*k) + 0];
    }
}

// Permutation step, in = state
void AES_Common::_shiftRows(unsigned char * in) {
    unsigned char temp[NB][NK];
    unsigned char t;
    unsigned char c, r;
    unsigned char h = 0;

    // Puts the array in matrix form to shift the rows
    for(c = 0; c < NB; c++) {
        for(r = 0; r < NB; r++) {
            temp[c][r] = in[h];
            h++;
        }
    }

    for(r = 1; r < NB; r++) {
        // Permute r bites to the left according to the row
        for (c = 0; c < r; c++) {
            t = temp[0][r];
            temp[0][r] = temp[1][r];
            temp[1][r] = temp[2][r];
            temp[2][r] = temp[3][r];
            temp[3][r] = t;
        }
    }

    // Puts the matrix back in the array form
    for(c = 0, h = 0; c < NB; c++) {
        for(r = 0; r < NB; r++) {
            in[h] = temp[c][r];
            h++;
        }
    }
}

void AES_Common::_addRoundKey(unsigned char * state, unsigned char * cipherKey,
        unsigned char round) {
    // Takes the round key, pre calculated in keyExpansion, and XOR with the state array
    for(int count = 0; count < CIPHER_SIZE; count++)
        state[count] ^= cipherKey[(CIPHER_SIZE)*round + count];
}

// in = state, confusion step
void AES_Common::_subBytes(unsigned char * in) {
    // Takes the correspondent value from the Sbox Array
    for(int i = 0; i < CIPHER_SIZE; i++)
        in[i] = _sBox[in[i]];
}

// in = plain text, out = encrypted text, key_schedule = round key array
unsigned char * AES_Common::_cipher(unsigned char in[4*NB],
        unsigned char * key_schedule) {
    unsigned char * state; // state variable
    unsigned char * out; // output (not nescessary, since it uses a pointer to the inpt array array)
    unsigned char round = 0; // round counter

    state = in; // state recieves the input

    // Starts by adding the round key to the array
    _addRoundKey(state, key_schedule, round);

    // For the next 9 rounds
    for(round = 1; round < 10; round++) {
        _subBytes(state); // Confuion
        _shiftRows(state); // Permutation
        _mixColumns(state); // Difusion
        _addRoundKey(state, key_schedule, round); // Key secrecy
    }

    // Ommits mix collumn operation in the last round
    _subBytes(state);
    _shiftRows(state);
    _addRoundKey(state, key_schedule, round);

    out = state; // Out recieves state

    return out;
}

void AES_Common::_invMixColumns(unsigned char * in) {
    in[0]++;
}

// in = state, confusion step
void AES_Common::_invSubBytes(unsigned char * in) {
    // Takes the correspondent value from the Sbox Array
    for(int i = 0; i < CIPHER_SIZE; i++)
        in[i] = _inv_sBox[in[i]];
}

// Permutation step, in = state
void AES_Common::_invShiftRows(unsigned char * in) {
    unsigned char temp[NB][NK];
    unsigned char t;
    unsigned char c, r;
    unsigned char h = 0;

    // Puts the array in matrix form to shift the rows
    for(c = 0; c < NB; c++)  {
        for(r = 0; r < NB; r++) {
            temp[c][r] = in[h];
            h++;
        }
    }

    for(r = 1; r < NB; r++) {
        // Permute r bites to the left according to the row
        for (c = 0; c < r; c++) {
            t = temp[3][r];
            temp[3][r] = temp[2][r];
            temp[2][r] = temp[1][r];
            temp[1][r] = temp[0][r];
            temp[0][r] = t;
        }
    }

    // Puts the matrix back in the array form
    for(c = 0, h = 0; c < NB; c++) {
        for(r = 0; r < NB; r++) {
            in[h] = temp[c][r];
            h++;
        }
    }
}

// in = encrypted text, out = plain text, key schedule = round key array
unsigned char * AES_Common::_invCipher(unsigned char in[4*NB],
        unsigned char * key_schedule) {
    unsigned char * state; // state variable
    unsigned char * out; //output (not nescessary, since it uses a pointer to the inpt array array)
    unsigned char round = 10; // round counter

    state = in; // state recieves the input

    _addRoundKey(state, key_schedule, round);

    // For the next 9 rounds
    for(round = 9; round > 1; round++) {
        _invSubBytes(state); // confuion
        _invShiftRows(state); // permutation
        _invMixColumns(state); // difusion
        _addRoundKey(state, key_schedule, round); // we need to call addRoundKey with the inverse number of rounds
    }

    // ommits mix collumn operation in the last round
    _invSubBytes(state);
    _invShiftRows(state);
    _addRoundKey(state, key_schedule, round);

    out = state;

    return out;
}

};
