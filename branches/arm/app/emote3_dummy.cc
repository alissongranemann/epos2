#include <utility/ostream.h>
//#include <machine/emote3/uart.h>

using namespace EPOS;

OStream cout;

// Radio registers
enum
{
	FRMCTRL0 = 0x40088624,
	FRMCTRL1 = 0x40088628,
	FREQCTRL = 0x4008863C,
	CSPT = 0x40088794,
	RFDATA = 0x40088828,
	RFST = 0x40088838,
};

// Radio commands
enum
{
	STXON = 0xd9,
	SFLUSHTX = 0xde,
	ISCLEAR = 0xff,
};

void config_radio()
{
	unsigned int * frmctrl0 = reinterpret_cast<unsigned int *>(FRMCTRL0);
	unsigned int * frmctrl1 = reinterpret_cast<unsigned int *>(FRMCTRL1);

	// Enable auto-CRC
	frmctrl0[0] = 0x80;

	// Do not enter receive mode after TX
	frmctrl1[0] = 0x00;

	/*
	   The carrier frequency is set by programming the 7-bit frequency word in the FREQ[6:0] bits of the
	   FREQCTRL register. Changes take effect after the next recalibration. Carrier frequencies in the range
	   from 2394 to 2507 MHz are supported. The carrier frequency f C , in MHz, is given by f C = (2394 +
	   FREQCTRL.FREQ[6:0]) MHz, and is programmable in 1-MHz steps.
	   IEEE 802.15.4-2006 specifies 16 channels within the 2.4-GHz band. These channels are numbered 11
	   through 26 and are 5 MHz apart. The RF frequency of channel k is given by Equation 1.
	   f c = 2405 + 5(k –11) [MHz] k [11, 26]
	   (1)
	   For operation in channel k, the FREQCTRL.FREQ register should therefore be set to
	   FREQCTRL.FREQ = 11 + 5 (k – 11).
    */
	unsigned int * freqctrl = reinterpret_cast<unsigned int *>(FREQCTRL);
	freqctrl[0] = 0x0b;

	// Disable counting of MAC overflows
	unsigned int * cspt = reinterpret_cast<unsigned int *>(CSPT);
	cspt[0] = 0xff;
}

// Immediately send a message using the radio.
// data is expected to hold only the MAC header and MAC payload.
void send(char * data, char data_len)
{
//	assert(data_len > 1);
//	assert(data_len < 126);
	unsigned int * rfst = reinterpret_cast<unsigned int *>(RFST);
	// Clear program memory
	rfst[0] = ISCLEAR;

	// Clear TXFIFO
	rfst[0] = SFLUSHTX;

	// Write a frame for transmission.
	// FCS is set to be generated by the hardware.
	unsigned int * addr = reinterpret_cast<unsigned int *>(RFDATA);
	addr[0] = data_len;
	// Data written to RFDATA register automatically end up in TXFIFO
	for(int i=1;i<data_len;i++)
		addr[0] = data[i];

	// Issue the send command
	rfst[0] = STXON;
}

int main()
{
//	config_radio();
//	send("Hello, World!", 13);

    //eMote3_UART _uart(9600, 8, 0, 1);
    while(true)
    {
       // _uart.put('h');
    	cout << "Hello, World!\r" << endl;
    }

	asm volatile(
			"eor r3, r3\t\n"
			"eor r4, r4\t\n"
			"eor r5, r5\t\n"
			"eor r6, r6\t\n"
			"eor r7, r7\t\n"
			"eor r8, r8\t\n"
			"add r3, #3\t\n"
			"add r4, #4\t\n"
			"add r5, #5\t\n"
			"add r6, #6\t\n"
			"add r7, #7\t\n"
			"add r8, #8\t\n"
			".CHARLIE:\t\n"
			"b .CHARLIE\t\n"
		);
    return 0;
}
