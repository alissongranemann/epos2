#!/usr/bin/env python3

# To get an unencrypted PEM (without passphrase):
# openssl rsa -in certificate.pem -out certificate_unencrypted.pem

import os
import sys
import time
import serial
import argparse
import requests
import struct

parser = argparse.ArgumentParser(description='EPOS Serial->IoT Gateway')
parser.add_argument('-d','--dev', help='EPOSMote III device descriptor file', default='/dev/ttyACM0')
parser.add_argument('-t','--timeout', help='Timeout for reading from mote', default=600)
args = vars(parser.parse_args())

DEV = args['dev']
TIMEOUT = int(args['timeout'])

def init_mote():
    global DEV
    global TIMEOUT

    ok = False
    while not ok:
        try:
            print("Waiting for", DEV, "to appear")
            while not os.path.exists(DEV) or not os.access(DEV, os.W_OK):
                pass
            #mote = serial.Serial(DEV, 115200, timeout = TIMEOUT, write_timeout = 10)
            mote=serial.Serial(DEV,baudrate=115200, bytesize=8, parity='N', stopbits=1,timeout=TIMEOUT)
            ok = True
        except KeyboardInterrupt:
            raise
        except Exception as e:
            print("Exception caught:", e, file=sys.stderr)
            ok = False
            time.sleep(3)

    print("Mote open", file=sys.stderr)
    ts = bytes(str(int(time.time() * 1000000)), 'ascii')
    try:
        mote.write(ts + b'X')
        print("epoch written", file=sys.stderr)
    except KeyboardInterrupt:
        raise
    except serial.serialutil.SerialTimeoutException:
        pass

    print("init_mote() done", file=sys.stderr)
    return mote

def read_first():
    try:
        first = mote.read(1)
        while struct.unpack('=1B', first)[0] != 94:
            first = mote.read(1)
            if not len(first):
                mote.close()
                init_mote()
        read_msg()
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print("Exception caught:", e, file=sys.stderr)
        mote.close()
        init_mote()

def read_msg():
    try:
        data = mote.read(8)
        header = struct.unpack('=2i', data)
        print("header=", header)
        data = mote.read(header[1])
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print("Exception caught:", e, file=sys.stderr)
        data = b''

    if not len(data):
        mote.close()
        init_mote()
    else:
        if read_end()[0] == 36:
            if(header[0] == 0):
                print("msg=", struct.unpack('=3l1L', data))                
            if(header[0] == 1):
                print("msg=", struct.unpack('=3l1L2Q', data))
                #mote.write(bytes(str(1), 'ascii'))
        else:
            read_first();

def read_end():
    try:
        end = mote.read(1)
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print("Exception caught:", e, file=sys.stderr)
        mote.close()
        init_mote()

    if not len(end):
        mote.close()
        init_mote()
    else:
        return struct.unpack('=1B', end)

if __name__ == "__main__":
    mote = init_mote()
    while(True):
        read_first();